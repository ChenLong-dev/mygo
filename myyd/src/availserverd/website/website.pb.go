// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: website.proto

package website

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Code int32

const (
	Code_SUCCESS Code = 0
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "SUCCESS",
	}
	Code_value = map[string]int32{
		"SUCCESS": 0,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_website_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_website_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{0}
}

type GetBusinessInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefClusterNode string `protobuf:"bytes,1,opt,name=ref_cluster_node,json=refClusterNode,proto3" json:"ref_cluster_node,omitempty"`
	RefClouduser   string `protobuf:"bytes,2,opt,name=ref_clouduser,json=refClouduser,proto3" json:"ref_clouduser,omitempty"`
	Offset         uint32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit          uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	MsgType        string `protobuf:"bytes,5,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
}

func (x *GetBusinessInfosReq) Reset() {
	*x = GetBusinessInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessInfosReq) ProtoMessage() {}

func (x *GetBusinessInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessInfosReq.ProtoReflect.Descriptor instead.
func (*GetBusinessInfosReq) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{0}
}

func (x *GetBusinessInfosReq) GetRefClusterNode() string {
	if x != nil {
		return x.RefClusterNode
	}
	return ""
}

func (x *GetBusinessInfosReq) GetRefClouduser() string {
	if x != nil {
		return x.RefClouduser
	}
	return ""
}

func (x *GetBusinessInfosReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBusinessInfosReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetBusinessInfosReq) GetMsgType() string {
	if x != nil {
		return x.MsgType
	}
	return ""
}

type GetBusinessInfosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetBusinessInfosRsp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBusinessInfosRsp) Reset() {
	*x = GetBusinessInfosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessInfosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessInfosRsp) ProtoMessage() {}

func (x *GetBusinessInfosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessInfosRsp.ProtoReflect.Descriptor instead.
func (*GetBusinessInfosRsp) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{1}
}

func (x *GetBusinessInfosRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetBusinessInfosRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetBusinessInfosRsp) GetData() *GetBusinessInfosRsp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetClusterIPInfosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset  uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	MsgType string `protobuf:"bytes,3,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
}

func (x *GetClusterIPInfosReq) Reset() {
	*x = GetClusterIPInfosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterIPInfosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterIPInfosReq) ProtoMessage() {}

func (x *GetClusterIPInfosReq) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterIPInfosReq.ProtoReflect.Descriptor instead.
func (*GetClusterIPInfosReq) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{2}
}

func (x *GetClusterIPInfosReq) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetClusterIPInfosReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetClusterIPInfosReq) GetMsgType() string {
	if x != nil {
		return x.MsgType
	}
	return ""
}

type GetClusterIPInfosRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32                     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string                     `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetClusterIPInfosRsp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetClusterIPInfosRsp) Reset() {
	*x = GetClusterIPInfosRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterIPInfosRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterIPInfosRsp) ProtoMessage() {}

func (x *GetClusterIPInfosRsp) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterIPInfosRsp.ProtoReflect.Descriptor instead.
func (*GetClusterIPInfosRsp) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{3}
}

func (x *GetClusterIPInfosRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetClusterIPInfosRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetClusterIPInfosRsp) GetData() *GetClusterIPInfosRsp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetDomainIPReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDomainIPReq) Reset() {
	*x = GetDomainIPReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainIPReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIPReq) ProtoMessage() {}

func (x *GetDomainIPReq) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIPReq.ProtoReflect.Descriptor instead.
func (*GetDomainIPReq) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{4}
}

type GetDomainIPRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32               `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string               `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *GetDomainIPRsp_Data `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDomainIPRsp) Reset() {
	*x = GetDomainIPRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainIPRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIPRsp) ProtoMessage() {}

func (x *GetDomainIPRsp) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIPRsp.ProtoReflect.Descriptor instead.
func (*GetDomainIPRsp) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{5}
}

func (x *GetDomainIPRsp) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDomainIPRsp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetDomainIPRsp) GetData() *GetDomainIPRsp_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBusinessInfosRsp_BusinessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefClouduser    string                                       `protobuf:"bytes,1,opt,name=ref_clouduser,json=refClouduser,proto3" json:"ref_clouduser,omitempty"`
	Domain          string                                       `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Url             string                                       `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	BusinessName    string                                       `protobuf:"bytes,4,opt,name=business_name,json=businessName,proto3" json:"business_name,omitempty"`
	Port            uint32                                       `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Protocol        string                                       `protobuf:"bytes,6,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Ip              []string                                     `protobuf:"bytes,7,rep,name=ip,proto3" json:"ip,omitempty"`
	RefClusterNode  string                                       `protobuf:"bytes,8,opt,name=ref_cluster_node,json=refClusterNode,proto3" json:"ref_cluster_node,omitempty"`
	InsiteIp        []*GetBusinessInfosRsp_BusinessInfo_InsiteIp `protobuf:"bytes,9,rep,name=insite_ip,json=insiteIp,proto3" json:"insite_ip,omitempty"`
	RefReserveNode  string                                       `protobuf:"bytes,10,opt,name=ref_reserve_node,json=refReserveNode,proto3" json:"ref_reserve_node,omitempty"`
	ReserveInsiteIp *GetBusinessInfosRsp_BusinessInfo_InsiteIp   `protobuf:"bytes,11,opt,name=reserve_insite_ip,json=reserveInsiteIp,proto3" json:"reserve_insite_ip,omitempty"`
	DnsType         uint32                                       `protobuf:"varint,12,opt,name=dns_type,json=dnsType,proto3" json:"dns_type,omitempty"`
	CheckIntvl      uint32                                       `protobuf:"varint,13,opt,name=checkIntvl,proto3" json:"checkIntvl,omitempty"`
	CheckLevel      uint32                                       `protobuf:"varint,14,opt,name=checkLevel,proto3" json:"checkLevel,omitempty"`
}

func (x *GetBusinessInfosRsp_BusinessInfo) Reset() {
	*x = GetBusinessInfosRsp_BusinessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessInfosRsp_BusinessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessInfosRsp_BusinessInfo) ProtoMessage() {}

func (x *GetBusinessInfosRsp_BusinessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessInfosRsp_BusinessInfo.ProtoReflect.Descriptor instead.
func (*GetBusinessInfosRsp_BusinessInfo) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetRefClouduser() string {
	if x != nil {
		return x.RefClouduser
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetBusinessName() string {
	if x != nil {
		return x.BusinessName
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetRefClusterNode() string {
	if x != nil {
		return x.RefClusterNode
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetInsiteIp() []*GetBusinessInfosRsp_BusinessInfo_InsiteIp {
	if x != nil {
		return x.InsiteIp
	}
	return nil
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetRefReserveNode() string {
	if x != nil {
		return x.RefReserveNode
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetReserveInsiteIp() *GetBusinessInfosRsp_BusinessInfo_InsiteIp {
	if x != nil {
		return x.ReserveInsiteIp
	}
	return nil
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetDnsType() uint32 {
	if x != nil {
		return x.DnsType
	}
	return 0
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetCheckIntvl() uint32 {
	if x != nil {
		return x.CheckIntvl
	}
	return 0
}

func (x *GetBusinessInfosRsp_BusinessInfo) GetCheckLevel() uint32 {
	if x != nil {
		return x.CheckLevel
	}
	return 0
}

type GetBusinessInfosRsp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetBusinessInfosRsp_BusinessInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetBusinessInfosRsp_Data) Reset() {
	*x = GetBusinessInfosRsp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessInfosRsp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessInfosRsp_Data) ProtoMessage() {}

func (x *GetBusinessInfosRsp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessInfosRsp_Data.ProtoReflect.Descriptor instead.
func (*GetBusinessInfosRsp_Data) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{1, 1}
}

func (x *GetBusinessInfosRsp_Data) GetList() []*GetBusinessInfosRsp_BusinessInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type GetBusinessInfosRsp_BusinessInfo_InsiteIp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ExtranetIp string `protobuf:"bytes,2,opt,name=extranet_ip,json=extranetIp,proto3" json:"extranet_ip,omitempty"`
}

func (x *GetBusinessInfosRsp_BusinessInfo_InsiteIp) Reset() {
	*x = GetBusinessInfosRsp_BusinessInfo_InsiteIp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBusinessInfosRsp_BusinessInfo_InsiteIp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBusinessInfosRsp_BusinessInfo_InsiteIp) ProtoMessage() {}

func (x *GetBusinessInfosRsp_BusinessInfo_InsiteIp) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBusinessInfosRsp_BusinessInfo_InsiteIp.ProtoReflect.Descriptor instead.
func (*GetBusinessInfosRsp_BusinessInfo_InsiteIp) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *GetBusinessInfosRsp_BusinessInfo_InsiteIp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetBusinessInfosRsp_BusinessInfo_InsiteIp) GetExtranetIp() string {
	if x != nil {
		return x.ExtranetIp
	}
	return ""
}

type GetClusterIPInfosRsp_ClusterIPInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName        string                                 `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OwnerType       string                                 `protobuf:"bytes,2,opt,name=owner_type,json=ownerType,proto3" json:"owner_type,omitempty"`
	RefServiceGroup string                                 `protobuf:"bytes,3,opt,name=ref_service_group,json=refServiceGroup,proto3" json:"ref_service_group,omitempty"`
	Type            uint32                                 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Ip              *GetClusterIPInfosRsp_ClusterIPInfo_Ip `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) Reset() {
	*x = GetClusterIPInfosRsp_ClusterIPInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterIPInfosRsp_ClusterIPInfo) ProtoMessage() {}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterIPInfosRsp_ClusterIPInfo.ProtoReflect.Descriptor instead.
func (*GetClusterIPInfosRsp_ClusterIPInfo) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{3, 0}
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) GetOwnerType() string {
	if x != nil {
		return x.OwnerType
	}
	return ""
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) GetRefServiceGroup() string {
	if x != nil {
		return x.RefServiceGroup
	}
	return ""
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo) GetIp() *GetClusterIPInfosRsp_ClusterIPInfo_Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

type GetClusterIPInfosRsp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetClusterIPInfosRsp_ClusterIPInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetClusterIPInfosRsp_Data) Reset() {
	*x = GetClusterIPInfosRsp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterIPInfosRsp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterIPInfosRsp_Data) ProtoMessage() {}

func (x *GetClusterIPInfosRsp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterIPInfosRsp_Data.ProtoReflect.Descriptor instead.
func (*GetClusterIPInfosRsp_Data) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{3, 1}
}

func (x *GetClusterIPInfosRsp_Data) GetList() []*GetClusterIPInfosRsp_ClusterIPInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type GetClusterIPInfosRsp_ClusterIPInfo_Ip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ExtranetIp string `protobuf:"bytes,2,opt,name=extranet_ip,json=extranetIp,proto3" json:"extranet_ip,omitempty"`
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo_Ip) Reset() {
	*x = GetClusterIPInfosRsp_ClusterIPInfo_Ip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo_Ip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterIPInfosRsp_ClusterIPInfo_Ip) ProtoMessage() {}

func (x *GetClusterIPInfosRsp_ClusterIPInfo_Ip) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterIPInfosRsp_ClusterIPInfo_Ip.ProtoReflect.Descriptor instead.
func (*GetClusterIPInfosRsp_ClusterIPInfo_Ip) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo_Ip) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GetClusterIPInfosRsp_ClusterIPInfo_Ip) GetExtranetIp() string {
	if x != nil {
		return x.ExtranetIp
	}
	return ""
}

type GetDomainIPRsp_Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domain string   `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     []string `protobuf:"bytes,2,rep,name=ip,proto3" json:"ip,omitempty"`
	IsIn   uint32   `protobuf:"varint,3,opt,name=is_in,json=isIn,proto3" json:"is_in,omitempty"`
}

func (x *GetDomainIPRsp_Info) Reset() {
	*x = GetDomainIPRsp_Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainIPRsp_Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIPRsp_Info) ProtoMessage() {}

func (x *GetDomainIPRsp_Info) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIPRsp_Info.ProtoReflect.Descriptor instead.
func (*GetDomainIPRsp_Info) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{5, 0}
}

func (x *GetDomainIPRsp_Info) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetDomainIPRsp_Info) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *GetDomainIPRsp_Info) GetIsIn() uint32 {
	if x != nil {
		return x.IsIn
	}
	return 0
}

type GetDomainIPRsp_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GetDomainIPRsp_Info `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetDomainIPRsp_Data) Reset() {
	*x = GetDomainIPRsp_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_website_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDomainIPRsp_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDomainIPRsp_Data) ProtoMessage() {}

func (x *GetDomainIPRsp_Data) ProtoReflect() protoreflect.Message {
	mi := &file_website_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDomainIPRsp_Data.ProtoReflect.Descriptor instead.
func (*GetDomainIPRsp_Data) Descriptor() ([]byte, []int) {
	return file_website_proto_rawDescGZIP(), []int{5, 1}
}

func (x *GetDomainIPRsp_Data) GetList() []*GetDomainIPRsp_Info {
	if x != nil {
		return x.List
	}
	return nil
}

var File_website_proto protoreflect.FileDescriptor

var file_website_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xe3, 0x04,
	0x0a, 0x0c, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x66, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x42, 0x75,
	0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x74,
	0x65, 0x49, 0x70, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x69, 0x74, 0x65, 0x49, 0x70, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70,
	0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x70, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x49,
	0x6e, 0x73, 0x69, 0x74, 0x65, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x6e, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x76, 0x6c,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x74,
	0x76, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x1a, 0x3f, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x69, 0x74, 0x65, 0x49, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65,
	0x74, 0x49, 0x70, 0x1a, 0x45, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc6, 0x03, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69,
	0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x86, 0x02, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x70, 0x52, 0x02, 0x69, 0x70,
	0x1a, 0x39, 0x0a, 0x02, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x6e, 0x65, 0x74, 0x49, 0x70, 0x1a, 0x47, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70,
	0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x22, 0xe7, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x49, 0x50, 0x52, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x50, 0x52, 0x73, 0x70, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x69, 0x73, 0x49, 0x6e, 0x1a, 0x38, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x49, 0x50, 0x52, 0x73, 0x70, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x2a, 0x13, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x00, 0x32, 0xfa, 0x01, 0x0a, 0x07, 0x57, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x12, 0x52, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1d, 0x2e,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x50, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a,
	0x0d, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x70, 0x12, 0x17,
	0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x49, 0x50, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x50, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_website_proto_rawDescOnce sync.Once
	file_website_proto_rawDescData = file_website_proto_rawDesc
)

func file_website_proto_rawDescGZIP() []byte {
	file_website_proto_rawDescOnce.Do(func() {
		file_website_proto_rawDescData = protoimpl.X.CompressGZIP(file_website_proto_rawDescData)
	})
	return file_website_proto_rawDescData
}

var file_website_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_website_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_website_proto_goTypes = []interface{}{
	(Code)(0),                                         // 0: website.Code
	(*GetBusinessInfosReq)(nil),                       // 1: website.GetBusinessInfosReq
	(*GetBusinessInfosRsp)(nil),                       // 2: website.GetBusinessInfosRsp
	(*GetClusterIPInfosReq)(nil),                      // 3: website.GetClusterIPInfosReq
	(*GetClusterIPInfosRsp)(nil),                      // 4: website.GetClusterIPInfosRsp
	(*GetDomainIPReq)(nil),                            // 5: website.GetDomainIPReq
	(*GetDomainIPRsp)(nil),                            // 6: website.GetDomainIPRsp
	(*GetBusinessInfosRsp_BusinessInfo)(nil),          // 7: website.GetBusinessInfosRsp.BusinessInfo
	(*GetBusinessInfosRsp_Data)(nil),                  // 8: website.GetBusinessInfosRsp.Data
	(*GetBusinessInfosRsp_BusinessInfo_InsiteIp)(nil), // 9: website.GetBusinessInfosRsp.BusinessInfo.InsiteIp
	(*GetClusterIPInfosRsp_ClusterIPInfo)(nil),        // 10: website.GetClusterIPInfosRsp.ClusterIPInfo
	(*GetClusterIPInfosRsp_Data)(nil),                 // 11: website.GetClusterIPInfosRsp.Data
	(*GetClusterIPInfosRsp_ClusterIPInfo_Ip)(nil),     // 12: website.GetClusterIPInfosRsp.ClusterIPInfo.Ip
	(*GetDomainIPRsp_Info)(nil),                       // 13: website.GetDomainIPRsp.Info
	(*GetDomainIPRsp_Data)(nil),                       // 14: website.GetDomainIPRsp.Data
}
var file_website_proto_depIdxs = []int32{
	8,  // 0: website.GetBusinessInfosRsp.data:type_name -> website.GetBusinessInfosRsp.Data
	11, // 1: website.GetClusterIPInfosRsp.data:type_name -> website.GetClusterIPInfosRsp.Data
	14, // 2: website.GetDomainIPRsp.data:type_name -> website.GetDomainIPRsp.Data
	9,  // 3: website.GetBusinessInfosRsp.BusinessInfo.insite_ip:type_name -> website.GetBusinessInfosRsp.BusinessInfo.InsiteIp
	9,  // 4: website.GetBusinessInfosRsp.BusinessInfo.reserve_insite_ip:type_name -> website.GetBusinessInfosRsp.BusinessInfo.InsiteIp
	7,  // 5: website.GetBusinessInfosRsp.Data.list:type_name -> website.GetBusinessInfosRsp.BusinessInfo
	12, // 6: website.GetClusterIPInfosRsp.ClusterIPInfo.ip:type_name -> website.GetClusterIPInfosRsp.ClusterIPInfo.Ip
	10, // 7: website.GetClusterIPInfosRsp.Data.list:type_name -> website.GetClusterIPInfosRsp.ClusterIPInfo
	13, // 8: website.GetDomainIPRsp.Data.list:type_name -> website.GetDomainIPRsp.Info
	1,  // 9: website.Website.get_business_infos:input_type -> website.GetBusinessInfosReq
	3,  // 10: website.Website.get_cluster_ip_infos:input_type -> website.GetClusterIPInfosReq
	5,  // 11: website.Website.get_domain_ip:input_type -> website.GetDomainIPReq
	2,  // 12: website.Website.get_business_infos:output_type -> website.GetBusinessInfosRsp
	4,  // 13: website.Website.get_cluster_ip_infos:output_type -> website.GetClusterIPInfosRsp
	6,  // 14: website.Website.get_domain_ip:output_type -> website.GetDomainIPRsp
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_website_proto_init() }
func file_website_proto_init() {
	if File_website_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_website_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessInfosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterIPInfosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterIPInfosRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainIPReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainIPRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessInfosRsp_BusinessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessInfosRsp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBusinessInfosRsp_BusinessInfo_InsiteIp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterIPInfosRsp_ClusterIPInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterIPInfosRsp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClusterIPInfosRsp_ClusterIPInfo_Ip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainIPRsp_Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_website_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDomainIPRsp_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_website_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_website_proto_goTypes,
		DependencyIndexes: file_website_proto_depIdxs,
		EnumInfos:         file_website_proto_enumTypes,
		MessageInfos:      file_website_proto_msgTypes,
	}.Build()
	File_website_proto = out.File
	file_website_proto_rawDesc = nil
	file_website_proto_goTypes = nil
	file_website_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WebsiteClient is the client API for Website service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebsiteClient interface {
	//获取业务信息
	GetBusinessInfos(ctx context.Context, in *GetBusinessInfosReq, opts ...grpc.CallOption) (*GetBusinessInfosRsp, error)
	//获取集群节点IP信息
	GetClusterIpInfos(ctx context.Context, in *GetClusterIPInfosReq, opts ...grpc.CallOption) (*GetClusterIPInfosRsp, error)
	//获取域名ip
	GetDomainIp(ctx context.Context, in *GetDomainIPReq, opts ...grpc.CallOption) (*GetDomainIPRsp, error)
}

type websiteClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsiteClient(cc grpc.ClientConnInterface) WebsiteClient {
	return &websiteClient{cc}
}

func (c *websiteClient) GetBusinessInfos(ctx context.Context, in *GetBusinessInfosReq, opts ...grpc.CallOption) (*GetBusinessInfosRsp, error) {
	out := new(GetBusinessInfosRsp)
	err := c.cc.Invoke(ctx, "/website.Website/get_business_infos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteClient) GetClusterIpInfos(ctx context.Context, in *GetClusterIPInfosReq, opts ...grpc.CallOption) (*GetClusterIPInfosRsp, error) {
	out := new(GetClusterIPInfosRsp)
	err := c.cc.Invoke(ctx, "/website.Website/get_cluster_ip_infos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websiteClient) GetDomainIp(ctx context.Context, in *GetDomainIPReq, opts ...grpc.CallOption) (*GetDomainIPRsp, error) {
	out := new(GetDomainIPRsp)
	err := c.cc.Invoke(ctx, "/website.Website/get_domain_ip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsiteServer is the server API for Website service.
type WebsiteServer interface {
	//获取业务信息
	GetBusinessInfos(context.Context, *GetBusinessInfosReq) (*GetBusinessInfosRsp, error)
	//获取集群节点IP信息
	GetClusterIpInfos(context.Context, *GetClusterIPInfosReq) (*GetClusterIPInfosRsp, error)
	//获取域名ip
	GetDomainIp(context.Context, *GetDomainIPReq) (*GetDomainIPRsp, error)
}

// UnimplementedWebsiteServer can be embedded to have forward compatible implementations.
type UnimplementedWebsiteServer struct {
}

func (*UnimplementedWebsiteServer) GetBusinessInfos(context.Context, *GetBusinessInfosReq) (*GetBusinessInfosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBusinessInfos not implemented")
}
func (*UnimplementedWebsiteServer) GetClusterIpInfos(context.Context, *GetClusterIPInfosReq) (*GetClusterIPInfosRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterIpInfos not implemented")
}
func (*UnimplementedWebsiteServer) GetDomainIp(context.Context, *GetDomainIPReq) (*GetDomainIPRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDomainIp not implemented")
}

func RegisterWebsiteServer(s *grpc.Server, srv WebsiteServer) {
	s.RegisterService(&_Website_serviceDesc, srv)
}

func _Website_GetBusinessInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBusinessInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServer).GetBusinessInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/website.Website/GetBusinessInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServer).GetBusinessInfos(ctx, req.(*GetBusinessInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Website_GetClusterIpInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterIPInfosReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServer).GetClusterIpInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/website.Website/GetClusterIpInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServer).GetClusterIpInfos(ctx, req.(*GetClusterIPInfosReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Website_GetDomainIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDomainIPReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsiteServer).GetDomainIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/website.Website/GetDomainIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsiteServer).GetDomainIp(ctx, req.(*GetDomainIPReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Website_serviceDesc = grpc.ServiceDesc{
	ServiceName: "website.Website",
	HandlerType: (*WebsiteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_business_infos",
			Handler:    _Website_GetBusinessInfos_Handler,
		},
		{
			MethodName: "get_cluster_ip_infos",
			Handler:    _Website_GetClusterIpInfos_Handler,
		},
		{
			MethodName: "get_domain_ip",
			Handler:    _Website_GetDomainIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "website.proto",
}
