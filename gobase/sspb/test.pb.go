// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package sspb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Point struct {
	X                    int64    `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y                    int64    `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetX() int64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Point) GetY() int64 {
	if m != nil {
		return m.Y
	}
	return 0
}

type Rectangle struct {
	Lo                   *Point   `protobuf:"bytes,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi                   *Point   `protobuf:"bytes,2,opt,name=hi,proto3" json:"hi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rectangle) Reset()         { *m = Rectangle{} }
func (m *Rectangle) String() string { return proto.CompactTextString(m) }
func (*Rectangle) ProtoMessage()    {}
func (*Rectangle) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Rectangle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rectangle.Unmarshal(m, b)
}
func (m *Rectangle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rectangle.Marshal(b, m, deterministic)
}
func (m *Rectangle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rectangle.Merge(m, src)
}
func (m *Rectangle) XXX_Size() int {
	return xxx_messageInfo_Rectangle.Size(m)
}
func (m *Rectangle) XXX_DiscardUnknown() {
	xxx_messageInfo_Rectangle.DiscardUnknown(m)
}

var xxx_messageInfo_Rectangle proto.InternalMessageInfo

func (m *Rectangle) GetLo() *Point {
	if m != nil {
		return m.Lo
	}
	return nil
}

func (m *Rectangle) GetHi() *Point {
	if m != nil {
		return m.Hi
	}
	return nil
}

type GetReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReq) Reset()         { *m = GetReq{} }
func (m *GetReq) String() string { return proto.CompactTextString(m) }
func (*GetReq) ProtoMessage()    {}
func (*GetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{2}
}

func (m *GetReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReq.Unmarshal(m, b)
}
func (m *GetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReq.Marshal(b, m, deterministic)
}
func (m *GetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReq.Merge(m, src)
}
func (m *GetReq) XXX_Size() int {
	return xxx_messageInfo_GetReq.Size(m)
}
func (m *GetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetReq proto.InternalMessageInfo

func (m *GetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetRsp struct {
	P                    *Point   `protobuf:"bytes,1,opt,name=p,proto3" json:"p,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRsp) Reset()         { *m = GetRsp{} }
func (m *GetRsp) String() string { return proto.CompactTextString(m) }
func (*GetRsp) ProtoMessage()    {}
func (*GetRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{3}
}

func (m *GetRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRsp.Unmarshal(m, b)
}
func (m *GetRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRsp.Marshal(b, m, deterministic)
}
func (m *GetRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRsp.Merge(m, src)
}
func (m *GetRsp) XXX_Size() int {
	return xxx_messageInfo_GetRsp.Size(m)
}
func (m *GetRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRsp proto.InternalMessageInfo

func (m *GetRsp) GetP() *Point {
	if m != nil {
		return m.P
	}
	return nil
}

type GetsReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetsReq) Reset()         { *m = GetsReq{} }
func (m *GetsReq) String() string { return proto.CompactTextString(m) }
func (*GetsReq) ProtoMessage()    {}
func (*GetsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{4}
}

func (m *GetsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetsReq.Unmarshal(m, b)
}
func (m *GetsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetsReq.Marshal(b, m, deterministic)
}
func (m *GetsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetsReq.Merge(m, src)
}
func (m *GetsReq) XXX_Size() int {
	return xxx_messageInfo_GetsReq.Size(m)
}
func (m *GetsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetsReq proto.InternalMessageInfo

func (m *GetsReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetsRsp struct {
	Ps                   []*Point `protobuf:"bytes,1,rep,name=ps,proto3" json:"ps,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetsRsp) Reset()         { *m = GetsRsp{} }
func (m *GetsRsp) String() string { return proto.CompactTextString(m) }
func (*GetsRsp) ProtoMessage()    {}
func (*GetsRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{5}
}

func (m *GetsRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetsRsp.Unmarshal(m, b)
}
func (m *GetsRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetsRsp.Marshal(b, m, deterministic)
}
func (m *GetsRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetsRsp.Merge(m, src)
}
func (m *GetsRsp) XXX_Size() int {
	return xxx_messageInfo_GetsRsp.Size(m)
}
func (m *GetsRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetsRsp.DiscardUnknown(m)
}

var xxx_messageInfo_GetsRsp proto.InternalMessageInfo

func (m *GetsRsp) GetPs() []*Point {
	if m != nil {
		return m.Ps
	}
	return nil
}

func init() {
	proto.RegisterType((*Point)(nil), "sspb.Point")
	proto.RegisterType((*Rectangle)(nil), "sspb.Rectangle")
	proto.RegisterType((*GetReq)(nil), "sspb.GetReq")
	proto.RegisterType((*GetRsp)(nil), "sspb.GetRsp")
	proto.RegisterType((*GetsReq)(nil), "sspb.GetsReq")
	proto.RegisterType((*GetsRsp)(nil), "sspb.GetsRsp")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 256 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xdf, 0x4a, 0xf3, 0x40,
	0x10, 0xc5, 0xbb, 0x49, 0xbe, 0x7e, 0x64, 0x52, 0x11, 0xe6, 0x2a, 0x46, 0x85, 0xb2, 0x81, 0xe2,
	0x8d, 0x41, 0xea, 0x33, 0x48, 0x6e, 0x25, 0xf5, 0x05, 0xd2, 0x32, 0xd8, 0x40, 0x9a, 0x5d, 0x33,
	0x83, 0xb4, 0x8f, 0xe0, 0x5b, 0xcb, 0xee, 0x4a, 0x09, 0xfe, 0xb9, 0xdb, 0xb3, 0xe7, 0xec, 0x6f,
	0x0e, 0x3b, 0x00, 0x42, 0x2c, 0x95, 0x1d, 0x8d, 0x18, 0x4c, 0x98, 0xed, 0x56, 0x97, 0xf0, 0xef,
	0xd9, 0x74, 0x83, 0xe0, 0x02, 0xd4, 0x31, 0x57, 0x4b, 0x75, 0x17, 0x37, 0xea, 0xe8, 0xd4, 0x29,
	0x8f, 0x82, 0x3a, 0xe9, 0x27, 0x48, 0x1b, 0xda, 0x49, 0x3b, 0xbc, 0xf6, 0x84, 0xd7, 0x10, 0xf5,
	0xc6, 0x27, 0xb3, 0x75, 0x56, 0x39, 0x48, 0xe5, 0x09, 0x4d, 0xd4, 0x1b, 0x67, 0xee, 0x3b, 0xff,
	0xf0, 0xbb, 0xb9, 0xef, 0xf4, 0x0d, 0xcc, 0x6b, 0x92, 0x86, 0xde, 0x10, 0x21, 0x19, 0xda, 0x03,
	0x79, 0x4a, 0xda, 0xf8, 0xb3, 0x2e, 0x83, 0xcb, 0x16, 0xaf, 0x40, 0xd9, 0xdf, 0x06, 0x28, 0xab,
	0x6f, 0xe1, 0x7f, 0x4d, 0xc2, 0x7f, 0x31, 0x56, 0x5f, 0x36, 0x5b, 0xd7, 0xc4, 0x72, 0xae, 0x96,
	0xf1, 0x8f, 0x26, 0x96, 0xd7, 0x1f, 0x0a, 0xb2, 0x17, 0x62, 0xd9, 0xd0, 0xf8, 0x4e, 0x3b, 0xc2,
	0x12, 0xe2, 0x9a, 0x04, 0x17, 0x21, 0x17, 0x4a, 0x16, 0x13, 0xc5, 0x56, 0xcf, 0x70, 0x05, 0x89,
	0x83, 0xe3, 0xc5, 0xf9, 0xde, 0xf5, 0x28, 0xa6, 0xd2, 0xe7, 0xee, 0x21, 0xad, 0x49, 0x36, 0x32,
	0x52, 0x7b, 0xc0, 0xe9, 0xe8, 0xe2, 0x32, 0x88, 0xf3, 0x5f, 0xea, 0xd9, 0x83, 0xda, 0xce, 0xfd,
	0x3a, 0x1e, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0xb7, 0xbd, 0xcf, 0x9c, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TestServeceClient is the client API for TestServece service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TestServeceClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsRsp, error)
	GetStream(ctx context.Context, in *Point, opts ...grpc.CallOption) (TestServece_GetStreamClient, error)
}

type testServeceClient struct {
	cc *grpc.ClientConn
}

func NewTestServeceClient(cc *grpc.ClientConn) TestServeceClient {
	return &testServeceClient{cc}
}

func (c *testServeceClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/sspb.TestServece/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServeceClient) Gets(ctx context.Context, in *GetsReq, opts ...grpc.CallOption) (*GetsRsp, error) {
	out := new(GetsRsp)
	err := c.cc.Invoke(ctx, "/sspb.TestServece/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServeceClient) GetStream(ctx context.Context, in *Point, opts ...grpc.CallOption) (TestServece_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TestServece_serviceDesc.Streams[0], "/sspb.TestServece/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServeceGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestServece_GetStreamClient interface {
	Recv() (*Rectangle, error)
	grpc.ClientStream
}

type testServeceGetStreamClient struct {
	grpc.ClientStream
}

func (x *testServeceGetStreamClient) Recv() (*Rectangle, error) {
	m := new(Rectangle)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServeceServer is the server API for TestServece service.
type TestServeceServer interface {
	Get(context.Context, *GetReq) (*GetRsp, error)
	Gets(context.Context, *GetsReq) (*GetsRsp, error)
	GetStream(*Point, TestServece_GetStreamServer) error
}

// UnimplementedTestServeceServer can be embedded to have forward compatible implementations.
type UnimplementedTestServeceServer struct {
}

func (*UnimplementedTestServeceServer) Get(ctx context.Context, req *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedTestServeceServer) Gets(ctx context.Context, req *GetsReq) (*GetsRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (*UnimplementedTestServeceServer) GetStream(req *Point, srv TestServece_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}

func RegisterTestServeceServer(s *grpc.Server, srv TestServeceServer) {
	s.RegisterService(&_TestServece_serviceDesc, srv)
}

func _TestServece_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServeceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sspb.TestServece/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServeceServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServece_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServeceServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sspb.TestServece/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServeceServer).Gets(ctx, req.(*GetsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestServece_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServeceServer).GetStream(m, &testServeceGetStreamServer{stream})
}

type TestServece_GetStreamServer interface {
	Send(*Rectangle) error
	grpc.ServerStream
}

type testServeceGetStreamServer struct {
	grpc.ServerStream
}

func (x *testServeceGetStreamServer) Send(m *Rectangle) error {
	return x.ServerStream.SendMsg(m)
}

var _TestServece_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sspb.TestServece",
	HandlerType: (*TestServeceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TestServece_Get_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _TestServece_Gets_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _TestServece_GetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "test.proto",
}
